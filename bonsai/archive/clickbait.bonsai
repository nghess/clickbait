<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.8.1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:spk="clr-namespace:Bonsai.Spinnaker;assembly=Bonsai.Spinnaker"
                 xmlns:p1="clr-namespace:OpenCV.Net;assembly=OpenCV.Net"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="spk:SpinnakerCapture">
          <spk:Index>0</spk:Index>
          <spk:ColorProcessing>Default</spk:ColorProcessing>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Image</Selector>
        <TypeMapping xsi:type="TypeMapping" TypeArguments="p1:IplImage" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:VideoWriter">
          <cv:FileName>D:\place-click\video\blank.mp4</cv:FileName>
          <cv:Suffix>None</cv:Suffix>
          <cv:Buffered>true</cv:Buffered>
          <cv:Overwrite>false</cv:Overwrite>
          <cv:FourCC>FMP4</cv:FourCC>
          <cv:FrameRate>30</cv:FrameRate>
          <cv:FrameSize>
            <cv:Width>0</cv:Width>
            <cv:Height>0</cv:Height>
          </cv:FrameSize>
          <cv:ResizeInterpolation>NearestNeighbor</cv:ResizeInterpolation>
        </Combinator>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="Combinator">
          <Combinator xsi:type="cv:ConvertColor">
            <cv:Conversion>Bgr2Hsv</cv:Conversion>
          </Combinator>
        </Builder>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:HsvThreshold">
          <cv:Lower>
            <cv:Val0>0</cv:Val0>
            <cv:Val1>107</cv:Val1>
            <cv:Val2>208</cv:Val2>
            <cv:Val3>0</cv:Val3>
          </cv:Lower>
          <cv:Upper>
            <cv:Val0>33</cv:Val0>
            <cv:Val1>255</cv:Val1>
            <cv:Val2>255</cv:Val2>
            <cv:Val3>0</cv:Val3>
          </cv:Upper>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FindContours">
          <cv:Mode>External</cv:Mode>
          <cv:Method>ChainApproxNone</cv:Method>
          <cv:Offset>
            <cv:X>0</cv:X>
            <cv:Y>0</cv:Y>
          </cv:Offset>
          <cv:MinArea>500</cv:MinArea>
          <cv:MaxArea xsi:nil="true" />
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:LargestBinaryRegion" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Centroid" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>X</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Y</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Visualizer</ipy:Name>
        <ipy:Script>import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *
import math

centroid_color = Scalar.Rgb(255,255,0)
centroid_radius = 10



@returns(IplImage)
def process(value):

  image = value.Item3
  centroid_x = value.Item1
  centroid_y = value.Item2
  if not math.isnan(centroid_x):
    CV.Circle(image, Point(centroid_x,centroid_y), centroid_radius, centroid_color,-1)
  return image</ipy:Script>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Task</ipy:Name>
        <ipy:Script>import clr
clr.AddReference("OpenCV.Net")
clr.AddReference("System")
from System import Array, Byte
from OpenCV.Net import *
import math

centroid_color = Scalar.Rgb(255,255,0)
grid_color = Scalar.Rgb(255,255,255)
centroid_radius = 10


# Class to generate maze coordinates
class gridMaze():
    def __init__(self, maze_bounds, maze_dims, contiguous=True):
        assert type(maze_bounds) == tuple or list, "Arena dims argument must be tuple or list"
        assert type(maze_dims) == tuple or list, "Maze dims argument must be tuple or list"

        self.bounds = maze_bounds
        self.shape = maze_dims
        #self.canvas = Array.CreateInstance(IplImage, maze_dims[1], maze_dims[0], 3)
        
        cellsize_x = maze_bounds[0] // maze_dims[0]
        cellsize_y = maze_bounds[1] // maze_dims[1]

        # Generate Grid
        xcoord = 0
        ycoord = 0
        coords = []

        for x in range(self.shape[1]):
            for y in range(self.shape[0]):
                coords.append((Point(xcoord, ycoord), Point(xcoord+cellsize_x, ycoord+cellsize_y)))
                xcoord += cellsize_x
            ycoord += cellsize_y
            xcoord = 0

        self.cells = coords

def drawGrid(grid, image):
  for ii in range(len(grid.cells)):
      CV.Rectangle(image, grid.cells[ii][0], grid.cells[ii][1], grid_color, thickness=2)
  #Pull out a single cell for neighbor testing
  CV.Rectangle(image, grid.cells[3][0], grid.cells[3][1], Scalar.Rgb(255,0,0), thickness=-1)  # Cell 8

# Generate grid maze
grid = gridMaze([1200,500], [12,5])


@returns(IplImage)
def process(value):

  image = value.Item3
  centroid_x = value.Item1
  centroid_y = value.Item2

  # Visualize target location
  drawGrid(grid, image)
  
  # Update mouse location
  if not math.isnan(centroid_x):
    CV.Circle(image, Point(centroid_x,centroid_y), centroid_radius, centroid_color,-1)

  return image




</ipy:Script>
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="1" To="2" Label="Source1" />
      <Edge From="2" To="3" Label="Source1" />
      <Edge From="2" To="11" Label="Source4" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="4" To="5" Label="Source1" />
      <Edge From="5" To="6" Label="Source1" />
      <Edge From="6" To="7" Label="Source1" />
      <Edge From="7" To="8" Label="Source1" />
      <Edge From="8" To="9" Label="Source1" />
      <Edge From="8" To="10" Label="Source1" />
      <Edge From="9" To="11" Label="Source1" />
      <Edge From="10" To="11" Label="Source2" />
      <Edge From="11" To="12" Label="Source1" />
      <Edge From="11" To="13" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>