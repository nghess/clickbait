<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.8.1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:spk="clr-namespace:Bonsai.Spinnaker;assembly=Bonsai.Spinnaker"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="spk:SpinnakerCapture">
          <spk:Index>0</spk:Index>
          <spk:ColorProcessing>Default</spk:ColorProcessing>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Image</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Crop">
          <cv:RegionOfInterest>
            <cv:X>30</cv:X>
            <cv:Y>355</cv:Y>
            <cv:Width>1345</cv:Width>
            <cv:Height>530</cv:Height>
          </cv:RegionOfInterest>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Smooth">
          <cv:SmoothType>Gaussian</cv:SmoothType>
          <cv:Size1>27</cv:Size1>
          <cv:Size2>27</cv:Size2>
          <cv:Sigma1>20</cv:Sigma1>
          <cv:Sigma2>20</cv:Sigma2>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Threshold">
          <cv:ThresholdValue>75</cv:ThresholdValue>
          <cv:MaxValue>255</cv:MaxValue>
          <cv:ThresholdType>Binary</cv:ThresholdType>
        </Combinator>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Script>import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *
import math

@returns(IplImage)
def process(value):

  image = 255-value
  return image</ipy:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FindContours">
          <cv:Mode>External</cv:Mode>
          <cv:Method>ChainApproxSimple</cv:Method>
          <cv:Offset>
            <cv:X>0</cv:X>
            <cv:Y>0</cv:Y>
          </cv:Offset>
          <cv:MinArea>5</cv:MinArea>
          <cv:MaxArea xsi:nil="true" />
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:LargestBinaryRegion" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Centroid" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>X</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Y</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Arena Grid</ipy:Name>
        <ipy:Description />
        <ipy:Script>clr.AddReference("OpenCV.Net")
clr.AddReference("System")
from System import Array, Byte
from OpenCV.Net import *
import math

centroid_color = Scalar.Rgb(255,255,255)
grid_color = Scalar.Rgb(255,255,255)
centroid_radius = 20


# Class to generate maze coordinates
class gridMaze():
    def __init__(self, maze_bounds, maze_dims, contiguous=True):
        assert type(maze_bounds) == tuple or list, "Arena dims argument must be tuple or list"
        assert type(maze_dims) == tuple or list, "Maze dims argument must be tuple or list"

        self.bounds = maze_bounds
        self.shape = maze_dims
        
        cellsize_x = maze_bounds[0] // maze_dims[0]
        cellsize_y = maze_bounds[1] // maze_dims[1]

        # Generate Grid
        xcoord = 0
        ycoord = 0
        coords = []

        for x in range(self.shape[1]):
            for y in range(self.shape[0]):
                coords.append((Point(xcoord, ycoord), Point(xcoord+cellsize_x, ycoord+cellsize_y)))
                xcoord += cellsize_x
            ycoord += cellsize_y
            xcoord = 0

        self.cells = coords

def drawGrid(grid, image):
  for ii in range(len(grid.cells)):
      CV.Rectangle(image, grid.cells[ii][0], grid.cells[ii][1], grid_color, thickness=2)
  #Pull out a single cell for neighbor testing
  CV.Rectangle(image, grid.cells[3][0], grid.cells[3][1], Scalar.Rgb(255,0,0), thickness=-1)  # Cell 8

# Function to extract dims from image
def get_image_shape(image):
    size = image.Size
    width = size.Width
    height = size.Height

    return [width, height]


@returns(IplImage)
def process(value):

  image = value.Item1

  centroid_x = value.Item2
  centroid_y = value.Item3

  grid_cells_x = 2#value.Item1
  grid_cells_y = 2#value.Item2

  # Subdivide Arena by grid dims
  img_dims = get_image_shape(image)
  grid_dims = [grid_cells_x, grid_cells_y]

  # Generate grid maze
  grid = gridMaze(img_dims, grid_dims)

  # Visualize target location
  drawGrid(grid, image)
  
  # Update mouse location
  if not math.isnan(centroid_x):
    CV.Circle(image, Point(centroid_x,centroid_y), centroid_radius, centroid_color,-1)

  return image
</ipy:Script>
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="1" To="2" Label="Source1" />
      <Edge From="2" To="3" Label="Source1" />
      <Edge From="2" To="12" Label="Source1" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="4" To="5" Label="Source1" />
      <Edge From="5" To="6" Label="Source1" />
      <Edge From="6" To="7" Label="Source1" />
      <Edge From="7" To="8" Label="Source1" />
      <Edge From="8" To="9" Label="Source1" />
      <Edge From="9" To="10" Label="Source1" />
      <Edge From="9" To="11" Label="Source1" />
      <Edge From="10" To="12" Label="Source2" />
      <Edge From="11" To="12" Label="Source3" />
      <Edge From="12" To="13" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>